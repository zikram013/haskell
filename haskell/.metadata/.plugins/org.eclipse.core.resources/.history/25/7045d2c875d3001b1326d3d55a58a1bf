
module AllEjercicios where
import Data.Char
import Data.List

--------Tema 2-------

{- Implementar una funcion en haskell que dados tres numeros enteros determine si estan ordenador de menor a mayor-}
estanOrdenados:: Int->Int->Int->Bool
estanOrdenados x y z = (x<y) && (y<z) && (x<z)

{-Implementar una funcion en Haskell que dados tres numeros enteros lo devuelva ordenados de menor a mayor-}
ordenarTresNumeros::Int->Int->Int->[Int]
ordenarTresNumeros x y z 
		|((x<y)&&(x<z)&&(y<z))=[x,y,z]
		|((x<y)&&(x<z)&&(y>z))=[x,z,y]
		|((y<x)&&(x<z)&&(y<z))=[y,x,z]
		|((y<x)&&(x>z)&&(y<z))=[y,z,x]
		|((x<y)&&(z<x)&&(z<y))=[z,x,y]
		|otherwise = [z,y,x]
		
{-Implementar en haskell una funcion que reciba un numero real y devuelva una tupla con su parte entera y sus dos primeros decimales(como numero entero)-}
tuplarDecimal::Float->(Int,Int)
tuplarDecimal n = (truncate n , mod(truncate(n*100))100)

{-Crear una funcion que reciba el readio de una circunferencia y devuelva una 2-tupla con la longitud de la circunferencia y con el area del circulo
Emplea una deficinion local con la clausula where para almacenar el valor de PI
Emplea despues una deficion local let para el mismo cometido-}
areaCirculo::Float->(Float,Float)
areaCirculo r = (2*pic*r , pic*r^2) where pic=3.14

areaCirculoLet::Float->(Float,Float)
areaCirculoLet r = let pic= 3.14 in (2*pic*r , pic*r^2)
		